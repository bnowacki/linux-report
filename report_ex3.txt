===================================

Operating Systems IT 2022/2023
Exercise 3 - Linux installation

===================================

Authors:
    - Izabela Wochna
    - StanisÅ‚aw Marciniak
    - Bartosz Nowacki 247036

===================================

Linux distribution and version: Ubuntu Server 22.04.2

Installation steps:
    1. On the initial screen pick the "Try or Install Ubuntu Server" option
    2. Select the preferred language and keyboard layout
    3. For the base of the installation select: Ubuntu Server
    4. Network configuration:
        4.1. Leave the NAT network adapter unchanged
        4.2. For the LAN network adapter:
                - set IPv4 method to manual
                - set Subnet field to 10.0.0.0/24
                - set Address field 10.0.0.1
                - leave other fields empty
    5. Configure proxy: leave empty
    6. Configure Ubuntu archive mirror: leave default value
    7. Storage configuration: select
        (x) Use an entire disk
        [x] Set up this disk as an LVM group // LVM stands for Logical Volume Manager
    8. Confirm storage configuration and select "continue"
    9. Setup your profile
    10. Don't intall OpenSSH server (we will do it manually later on)
    11. Don't install any additional packages yet
    12. Wait for the installation to complete and select "Reboot now"
    13. Done! You can now login using credentials from point 9

===================================
Basic requirements
===================================

    1. To list groups of the current user the `id` or `groups` commands can be used.

        In Ubuntu the user created during the installation process belongs to the following groups by default: 
            username, adm, cdrom, sudo, dip, plugdev, lxd

        To change identity to superuser run: 
            $ sudo su
        and enter your password

    2. Network interfaces can be configured in the `/etc/netplan/00-installer-config.yaml` file.

        To display current network interfaces configuration run:
            $ ip a

        exemplary `/etc/netplan/00-installer-config.yaml` contents

        for network interface configured to acquire network address using DHCP:
            network:
              version: 2
              ethernets:
                ens33:
                  dhcp4: true

        for network interface configured to use static IP:
            network:
              version: 2
              ethernets:
                ens33:
                  addresses:
                  - 192.168.3.10/24
                  gateway4: 192.168.3.1
                  nameservers:
                    addresses: [8.8.8.8,8.8.4.4]

        To apply the changes run:
            $ sudo netplan apply

    3. To create a new user run:
            $ useradd username

        To add user to a group run:
            $ usermod -a -G groupname username

        E.g. to add user "athos" to group "users"
            $ usermod -a -G users athos
    
    4. password settings for all users can be inspected in the `/etc/shadow` file

        data for each user is displayed in the format:
        1:2:3:4:5:6:7:8:

        where:
            1 -> username
            2 -> hashed password, if the password field contains an asterisk (*) or exclamation point (!),
            the user will not be able to login to the system using password authentication.
            3 -> date of last password change in days since Unix time
            4 -> minimum number of days required between password changes
            5 -> maximum number of days the password is valid
            6 -> number of days before password is to expire that user is warned that his/her password must be changed
            7 -> number of days after password expires that account is disabled
            8 -> date of expiration of the account in days since Unix time

        to show account aging information in a more readable way run:
            $ chage username -l

        to set max time between password change to 30 days run:
            $ chage username -M 30

    5. first create a new group with
            $ groupadd operators

        set a password for the group
            $ gpasswd operators

        To switch temporarily to the `operators` group from one of the created users, 
        there are a few options that can be used:
        
            a)  The `newgrp` command:
                    $ newgrp operators
                This command will create a new shell with the operators group as the current group.

                you can run
                    $ groups
                to verify temporary group membership
            
            b)  The `sg` command:
                    $ sg operators "command"
                This command will execute the following command in a new shell
                with the operators group as the current group.

                e.g.
                    $ sg operators "touch file.txt"
                then run
                    $ ls -l
                to verify that the new file has the group ownership set to the `operators` group

    6. add the following line in the `/etc/profile` file:
        export LOGINTIME=$(date -u --rfc-3339='s')

        You could also add a script file in `/etc/profile.d` dir,
        as the scripts located there are all executed in `/etc/profile`  
    
    7. An example of Linux binary that has both statically linked and dynamically linked versions is bash
    
        Size of files can be checked with
            $ du -h [FILE]...

            $ du -h /bin/bash /bin/bash-static
                1.4M   /bin/bash
                2.5M   /bin/bash-static

        bash-static takes 1.1M bytes more space on disk

        to find a list of shared libraries for bash run:
            $ ldd /bin/bash

        which outputs:
            linux-vdso.so.1 (0x00007ffc9cbb0000)
            libtinfo.so.6 => /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007f103bae8000)
            libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f103b8c0000)
            /lib64/ld-linux-x86-64.so.2 (0x00007f103bc82000)

        linux-vdso.so.1 is a virtual shared object that doesn't have any physical file on the disk,
        /lib64/ld-linux-x86-64.so.2 is a dynamic linker

    8. batch command runs specified commands when the system is idle 
    
        To install batch run:
            $ sudo apt install at

        rdate command sets the system's date from a remote host

        To install rdate run:
            $ sudo apt install rdate

        To sync the system time with external time server (time.nist.gov in this case) run:
            $ sudo batch
        and in the displayed prompt 
            $ sudo rdate time.nist.gov

        to schedule the task press Ctrl + d or Ctrl + c to cancel

    9. to update all packeges in the system run:
        $ sudo apt update && sudo apt upgrade

        To determine the package from which file was installed:
            $ dpkg -S file_path    


===================================
Advanced requirements
===================================

1. Install the OpenSSH server 
    The OpenSSH server allows remote terminal access using the SSH protocol. You can install it by running the following command:
        $ sudo apt install openssh-server

2. Disable root login via password
    To do this the SSH configuration file `/etc/ssh/sshd_config` has to be modified.
    ( Actually on Ubuntu 22.04 root login via password is disabled by default )
    Locate the following line:
        #PermitRootLogin yes
    uncomment it and change it to:
        PermitRootLogin prohibit-password

3. Configure SSH access for the superuser
    To allow remote access to the superuser using only the public SSH key, 
    you need to add the public key to the /root/.ssh/authorized_keys file.

    To generate public/private key pair you can use the following command:
        $ ssh-keygen
    by default it will use `rsa` algorithm
    Run the above command on a machine that you want to login from in ~/.ssh folder,
    then copy the generated public key to /root/.ssh/authorized_keys file on the configured server.

4. Configure SSH access for other users
    repeat the steps from point 3. but instead of modifying the /root/.ssh/authorized_keys file,
    modify ~/.ssh/authorized_keys files in home directories of respective users.

    Password login is enabled by default for non root users,
    but it can be changed by modifying `/etc/ssh/sshd_config` file
    find the line:
        #PasswordAuthentication yes
    uncomment it and choose `yes` or `no` option

5. Configure systemd targets
    Because there are no runlevels in Ubuntu systemd targets have to be used.
    One way of meeting the task's requirements is to run the following set of commands:
        
        cd into directory with systemd unit configuration files
            $ cd /usr/lib/systemd/system
        copy multi-user.target to "inherit" it's configuration
            $ cp multi-user.target multi-user-ssh.target
        create a directory for multi-user-ssh dependecies
            $ mkdir multi-user-ssh.target.wants
        symlink multi-user.target into the created .wants dir,
        in this way multi-user-ssh.target inherits all of the dependencies of multi-user.target 
            $ ln -s multi-user.target multi-user-ssh.target.wants/multi-user.target
        symlink ssh.service to make it a dependancy
            $ ln -s ssh.service multi-user-ssh.target.wants/ssh.service
        disable ssh service while running the multi-user.target
            $ systemctl disable ssh.service

6. Configure the booting menu to give the user the option of selecting multi-user-ssh.target
    To do this modify the GRUB configuration file `/etc/default/grub`.
    
    Locate the following lines:
        GRUB_TIMEOUT_STYLE=hidden
        GRUB_TIMEOUT=0
    And change it to:
        GRUB_TIMEOUT_STYLE=hidden
        GRUB_TIMEOUT=10
    here 10 is the number of seconds, before the system boots with the default option

    next modify the `/etc/grub.d/40_custom` file (or create it if it doesn't exist)
    the constents of the file should be as follows:
    
    ```
        #!/bin/sh
        exec tail -n +3 $0
        # This file provides an easy way to add custom menu entries.  Simply type the
        # menu entries you want to add after this comment.  Be careful not to change
        # the 'exec tail' line above.
        
        menuentry 'Ubuntu ssh enabled' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-simple-18e0b67e-dfd7-41c7-a47a-74b9ca6e7058' {
                recordfail
                load_video
                gfxmode $linux_gfx_mode
                insmod gzio
                if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi
                insmod part_gpt
                insmod ext2
                set root='hd0,gpt2'
                if [ x$feature_platform_search_hint = xy ]; then
                  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt2 --hint-efi=hd0,gpt2 --hint-baremetal=ahci0,gpt2  32f83ef2-253a-4059-9c49-085378a55f49
                else
                  search --no-floppy --fs-uuid --set=root 32f83ef2-253a-4059-9c49-085378a55f49
                fi
                linux   /vmlinuz-5.15.0-71-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv systemd.unit=multi-user-ssh.target ro
                initrd  /initrd.img-5.15.0-71-generic
        }
    ```

    pay attention to the linux ... line
        `systemd.unit=multi-user-ssh.target`
    fragment specifies with which systemd target the system will boot

    to finalize the changes run
        $ sudo update-grub
    
    now after rebooting you should be able to see `Ubuntu ssh enabled` option in the GRUB menu.

===================================
Additional requirements
===================================

1. Writers group
    Set a "users" group as a primary group for the users run
        $ usermod -g users athos 
        $ usermod -g users porthos 
        $ usermod -g users aramis

    Create the new group:
        $ sudo groupadd writers
    
    Add "athos" and "porthos" to the "writers" group:
        $ sudo usermod -aG writers athos
        $ sudo usermod -aG writers porthos

    Create a directory that the "writers" is supposed to have write permissions to
        $ mkdir /path/to/directory

    Change the group ownership of the directory to "writers":
        $ chown :writers /path/to/directory

    Setgid for directory,
    this makes any new files in that directory to be created with thw ownership of the group of this directory
        $ chmod g+s /path/to/directory

    The umask setting controls the default permissions for newly created files and directories,
    and it is not directly related to granting group write permissions on an existing directory.

    But to set default umask for all users add the following line to the `/etc/profile` file
        umask 002

2. autolog
    $ sudo apt install autolog

    edit the `/etc/autolog.conf` file
    find the line starting with `group=users` and set it to
        group=users     idle=5 grace=5
    
    or if it is to be applied to ALL user add the following line:
        name=.*         idle=5 grace=5
    
    where idle is time in minutes after which the user will be logged off
    and grace is time in seconds added to the idle time in which the following notification is presented to the user:

        .----------------------------------------------.
        |     aramis: You've been idle for   5 min.    |
        |        You'll be logged off in   5 sec       |
        |             unless you hit a key.            |
        `----------------------------------------------'

3. limit disk space usage
    $ sudo apt install quota

    edit `/etc/fstab` file, add usrquota to the filesystem options
    it should look similar to this:
    /dev/disk/by-id/dm-uuid-LVM-t9GoO2dfSD8aDlY0qLELuFHsYO798S81zS1O1yVIqCXWBQY7iQkLZHuAb4caodaf / ext4 defaults,usrquota 0 1

    run:
        $ sudo quotacheck -cum /
        $ sudo quotaon -v /

    for each user:
        $ sudo edquota -u aramis
    
    and set the blocks and inode limits to the desired size
    blocks mean disk space in KB
    inodes mean the number of actual files

    to generate a report of current disk usage and limits run
        $ sudo repquota -au

    if a user tries to exceed the cofigured quota the following message will be displayed:
        touch: cannot touch 'file': Disk quota exceeded
